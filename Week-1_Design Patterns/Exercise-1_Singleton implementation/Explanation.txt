In this design, the Singleton pattern is implemented by maintaining a private static Logger instance and a private constructor to block instantiation from outside the class. A public static getInstance() method checks if the instance is null and creates it only once, guaranteeing that a single Logger object exists throughout the application's lifecycle. To verify this, two references (log1 and log2) are obtained via Logger.getInstance() and compared. If both references point to the same object, it confirms that the Singleton pattern is correctly enforced, ensuring a single instance is used.